info:
  app:
    name: ${spring.application.name}
    version: @version@
server:
  port: 8085
eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8080/eureka/
spring:
  application:
    name: service-two
  zipkin:
    base-url: http://localhost:8086

#  datasource:
#    username: root
#    password: 123456
#    url: jdbc:mysql://localhost:3306/testdb?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=UTC
#    driver-class-name: com.mysql.jdbc.Driver
logging:
  pattern:
    console: '%d{yyyy-MM-dd HH:mm:ss SSS,GMT+8} [%X{X-B3-TraceId:-},%X{X-B3-ParentSpanId:-},%X{X-B3-SpanId:-}] [%thread] %-5level %logger{50} - %msg%n'
management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    health:
      show-details: always
    shutdown:
      enabled: true
feign:
  hystrix:
    enabled: true
  httpclient:
    enabled: true # 默认为true
# ribbon config -> CommonClientConfigKey,DefaultClientConfigImpl
ribbon:
  MaxAutoRetries: 0
  MaxAutoRetriesNextServer: 0
  ConnectTimeout: 2000
  ReadTimeout: 10000
  ServerListRefreshInterval: 1
# hystrix config -> https://github.com/Netflix/Hystrix/wiki/Configuration
hystrix:
  command:
    default:
      execution:
        timeout:
          enabled: true
        isolation:
          thread:
            timeoutInMilliseconds: 5000 # 此处超时时间取ribbon.ReadTimeout和timeoutInMilliseconds之间的最小值，超时立刻返回

# DataSource config
mybatis:
  mapper-locations: classpath:mapper/**/*.xml
sharding:
  jdbc:
    datasource:
      names: db0,db1
      # 数据源1
      db0:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3306/user_0?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=UTC
        username: root
        password: 123456
      # 数据源2
      db1:
        type: com.alibaba.druid.pool.DruidDataSource
        driver-class-name: com.mysql.jdbc.Driver
        url: jdbc:mysql://localhost:3306/user_1?useUnicode=true&characterEncoding=utf-8&useSSL=false&serverTimezone=UTC
        username: root
        password: 123456
    # 控制台打印sql语句
    config:
      props:
        sql:
          show: true
      sharding:
        tables:
          user:
            # 配置表节点
            actual-data-nodes: db$->{0..1}.user_$->{0..1}
            table-strategy:
              # standard:
                # 分表匹配字段
                # sharding-column: user_id
                # 分表策略实现
                # precise-algorithm-class-name: com.quyc.servicetwo.config.DemoTableShardingAlgorithm
              inline: # 行表达式
                sharding-column: user_id        #列名称，多个列以逗号分隔
                algorithm-expression: db${user_id % 2}    #按模运算分配
        default-database-strategy:
          # standard:
            # 分库匹配字段
            # sharding-column: user_id
            # 分库策略实现
            # precise-algorithm-class-name: com.quyc.servicetwo.config.DemoTableShardingAlgorithm
          inline: # 行表达式
            sharding-column: user_id        #列名称，多个列以逗号分隔
            algorithm-expression: db${user_id % 2}    #按模运算分配
